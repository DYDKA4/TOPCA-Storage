artifact_types: {}
capability_types:
  amazon.capabilities.Node:
    attributes: {}
    derived_from: tosca.capabilities.Node
    metadata: {}
    properties: {}
    valid_source_types: []
  amazon.capabilities.network.Bindable:
    attributes: {}
    derived_from: amazon.capabilities.Node
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.Node:
    attributes: {}
    derived_from: tosca.capabilities.Root
    description: The Node capability indicates the base capabilities of a TOSCA Node
      Type.
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.Root:
    attributes: {}
    description: 'The TOSCA root Capability Type all other TOSCA base Capability Types
      derive from. '
    metadata: {}
    properties: {}
    valid_source_types: []
data_types:
  amazon.datatypes.Root:
    constraints: []
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties: {}
  amazon.datatypes.SecurityGroupRule:
    constraints: []
    derived_from: amazon.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties:
      cidr_ip:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      from_port:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: integer
      ports:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: list
      proto:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      to_port:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: integer
  tosca.datatypes.Root:
    constraints: []
    description: 'The TOSCA root Data Type all other TOSCA base Data Types derive
      from '
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties: {}
group_types: {}
interface_types:
  provider.interfaces.relationships.Target:
    derived_from: tosca.interfaces.Root
    description: 'The relationship to use scripts before target or source is created
      in relationship '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.Root:
    description: 'The TOSCA root Interface Type all other TOSCA base Interface Types
      derive from '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.node.lifecycle.Standard:
    derived_from: tosca.interfaces.Root
    description: This lifecycle interface defines the essential, normative operations
      that TOSCA nodes may support.
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.relationship.Configure:
    derived_from: tosca.interfaces.Root
    description: 'The lifecycle interfaces define the essential, normative operations
      that each TOSCA Relationship Types may support. '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
node_types:
  amazon.nodes.Eni:
    artifacts: {}
    attributes: {}
    capabilities:
      bind:
        attributes: {}
        occurrences:
        - 0
        - UNBOUNDED
        properties: {}
        type: amazon.capabilities.network.Bindable
        valid_source_types: []
    derived_from: amazon.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      eni_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      interfaces:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      mac_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      private_ip_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - security_groups:
        capability: amazon.capabilities.Node
        node: amazon.nodes.Group
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: amazon.relationships.DependsOn
    - subnet_id:
        capability: amazon.capabilities.Node
        node: amazon.nodes.VpcSubnet
        occurrences:
        - 0
        - 1
        relationship:
          type: amazon.relationships.DependsOn
  amazon.nodes.Group:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: amazon.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      description:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      group_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      rules:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: amazon.datatypes.SecurityGroupRule
        key_schema: {}
        metadata: {}
        required: false
        type: list
      rules_egress:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: amazon.datatypes.SecurityGroupRule
        key_schema: {}
        metadata: {}
        required: false
        type: list
    requirements:
    - vpc_id:
        capability: amazon.capabilities.Node
        node: amazon.nodes.VpcNet
        occurrences:
        - 0
        - 1
        relationship:
          type: amazon.relationships.DependsOn
  amazon.nodes.Root:
    artifacts: {}
    attributes: {}
    capabilities:
      feature:
        attributes: {}
        occurrences:
        - 1
        - 1
        properties: {}
        type: amazon.capabilities.Node
        valid_source_types: []
    derived_from: tosca.nodes.Root
    interfaces: {}
    metadata: {}
    properties: {}
    requirements:
    - dependency:
        capability: amazon.capabilities.Node
        node: amazon.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: amazon.relationships.DependsOn
  amazon.nodes.VpcNet:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: amazon.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      cidr_block:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      internet_gateway:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      is_default:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      tags:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: map
      vpc_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements: []
  amazon.nodes.VpcSubnet:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: amazon.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      cidr:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      map_public:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      subnet_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      tags:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: map
    requirements:
    - vpc_id:
        capability: amazon.capabilities.Node
        node: amazon.nodes.VpcNet
        occurrences:
        - 1
        - 1
        relationship:
          type: amazon.relationships.DependsOn
  tosca.nodes.Root:
    artifacts: {}
    attributes: {}
    capabilities:
      feature:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Node
        valid_source_types: []
    description: 'The TOSCA root node all other TOSCA base node types derive from. '
    interfaces:
      Standard:
        notifications: {}
        operations: {}
        type: tosca.interfaces.node.lifecycle.Standard
    metadata: {}
    properties:
      state:
        constraints: []
        description: "The state of the node instance. See section \u201CNode States\u201D\
          \ for allowed values. "
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      tosca_id:
        constraints: []
        description: 'A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      tosca_name:
        constraints: []
        description: 'This attribute reflects the name of the Node Template as defined
          in the TOSCA service template. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
policy_types: {}
relationship_types:
  amazon.relationships.DependsOn:
    attributes: {}
    derived_from: provider.relationships.DependsOn
    description: This type results in ordering of initializing objects.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - amazon.capabilities.Node
  provider.relationships.DependsOn:
    attributes: {}
    derived_from: provider.relationships.Root
    description: This type results in ordering of initializing objects.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.Node
  provider.relationships.Root:
    attributes: {}
    derived_from: tosca.relationships.Root
    interfaces:
      Target:
        notifications: {}
        operations: {}
        type: provider.interfaces.relationships.Target
    metadata: {}
    properties: {}
    valid_target_types: []
  tosca.relationships.DependsOn:
    attributes: {}
    derived_from: tosca.relationships.Root
    description: This type represents a general dependency relationship between two
      nodes.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.Node
  tosca.relationships.Root:
    attributes:
      state:
        entry_schema: {}
        key_schema: {}
        type: string
      tosca_id:
        entry_schema: {}
        key_schema: {}
        type: string
    description: 'The TOSCA root Relationship Type all other TOSCA base Relationship
      Types derive from. '
    interfaces:
      Configure:
        notifications: {}
        operations: {}
        type: tosca.interfaces.relationship.Configure
    metadata: {}
    properties:
      tosca_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
    valid_target_types: []
tosca_definitions_version: tosca_simple_yaml_1_0
