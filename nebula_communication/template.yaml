artifact_types:
  openstack.artifacts.Deployment.Image:
    derived_from: tosca.artifacts.Deployment.Image
    metadata: {}
    properties: {}
  openstack.artifacts.File:
    derived_from: tosca.artifacts.File
    metadata: {}
    properties: {}
  tosca.artifacts.Deployment:
    derived_from: tosca.artifacts.Root
    description: TOSCA base type for deployment artifacts
    metadata: {}
    properties: {}
  tosca.artifacts.Deployment.Image:
    derived_from: tosca.artifacts.Deployment
    metadata: {}
    properties: {}
  tosca.artifacts.File:
    derived_from: tosca.artifacts.Root
    metadata: {}
    properties: {}
  tosca.artifacts.Root:
    description: 'The TOSCA Artifact Type all other TOSCA Artifact Types derive from '
    metadata: {}
    properties:
      version:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: version
capability_types:
  openstack.capabilities.Attachment:
    attributes: {}
    derived_from: tosca.capabilities.Attachment
    metadata: {}
    properties: {}
    valid_source_types: []
  openstack.capabilities.Container:
    attributes: {}
    derived_from: tosca.capabilities.Container
    metadata: {}
    properties: {}
    valid_source_types: []
  openstack.capabilities.Node:
    attributes: {}
    derived_from: tosca.capabilities.Node
    metadata: {}
    properties: {}
    valid_source_types: []
  openstack.capabilities.network.Bindable:
    attributes: {}
    derived_from: openstack.capabilities.Node
    metadata: {}
    properties: {}
    valid_source_types: []
  openstack.capabilities.network.Linkable:
    attributes: {}
    derived_from: openstack.capabilities.Node
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.Attachment:
    attributes: {}
    derived_from: tosca.capabilities.Root
    description: 'This is the default TOSCA type that should be used or extended to
      define an attachment capability of a (logical) infrastructure device node (e.g.,
      BlockStorage node) '
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.Container:
    attributes: {}
    derived_from: tosca.capabilities.Root
    description: 'The Container capability, when included on a Node Type or Template
      definition, indicates that the node can act as a container for (or a host for)
      one or more other declared Node Types. '
    metadata: {}
    properties:
      cpu_frequency:
        constraints:
        - equal:
            greater_or_equal: 0.1 GHz
        - equal:
            greater_or_equal: 0.1 GHz
        - equal:
            greater_or_equal: 0.1 GHz
        - equal:
            greater_or_equal: 0.1 GHz
        - equal:
            greater_or_equal: 0.1 GHz
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.frequency
      disk_size:
        constraints:
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      mem_size:
        constraints:
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        - equal:
            greater_or_equal: 0 MB
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      num_cpus:
        constraints:
        - equal:
            greater_or_equal: 1
        - equal:
            greater_or_equal: 1
        - equal:
            greater_or_equal: 1
        - equal:
            greater_or_equal: 1
        - equal:
            greater_or_equal: 1
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: integer
    valid_source_types: []
  tosca.capabilities.Endpoint:
    attributes: {}
    derived_from: tosca.capabilities.Root
    description: 'This is the default TOSCA type that should be used or extended to
      define a network endpoint capability. This includes the information to express
      a basic endpoint with a single port or a complex endpoint with multiple ports.
      By default the Endpoint is assumed to represent an address on a private network
      unless otherwise specified. '
    metadata: {}
    properties:
      initiator:
        constraints:
        - equal:
            valid_values:
            - source
            - target
            - peer
        default: source
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      ip_address:
        constraints: []
        default: 0.0.0.0/0
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: string
      network_name:
        constraints: []
        default: PRIVATE
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: tosca.datatypes.network.PortDef
      port_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      ports:
        constraints:
        - equal:
            min_length: 1
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: tosca.datatypes.network.PortSpec
        key_schema: {}
        metadata: {}
        required: false
        type: map
      protocol:
        constraints: []
        default: tcp
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      secure:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      url_path:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    valid_source_types: []
  tosca.capabilities.Endpoint.Admin:
    attributes: {}
    derived_from: tosca.capabilities.Endpoint
    description: 'This is the default TOSCA type that should be used or extended to
      define a specialized administrator endpoint capability. '
    metadata: {}
    properties:
      secure:
        constraints:
        - equal:
            equal: true
        default: true
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
    valid_source_types: []
  tosca.capabilities.Node:
    attributes: {}
    derived_from: tosca.capabilities.Root
    description: The Node capability indicates the base capabilities of a TOSCA Node
      Type.
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.OperatingSystem:
    attributes: {}
    derived_from: tosca.capabilities.Root
    metadata: {}
    properties:
      architecture:
        constraints: []
        description: 'The host Operating System (OS) architecture. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      distribution:
        constraints: []
        description: "The host Operating System (OS) distribution. Examples of valid\
          \ values for an \u201Ctype\u201D of \u201CLinux\u201D would include: debian,\
          \ fedora, rhel and ubuntu. "
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      type:
        constraints: []
        description: 'The host Operating System (OS) type. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      version:
        constraints: []
        description: 'The host Operating System version. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: version
    valid_source_types: []
  tosca.capabilities.Root:
    attributes: {}
    description: 'The TOSCA root Capability Type all other TOSCA base Capability Types
      derive from. '
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.Scalable:
    attributes: {}
    derived_from: tosca.capabilities.Root
    metadata: {}
    properties:
      default_instances:
        constraints: []
        description: 'An optional property that indicates the requested default number
          of instances that should be the starting number of instances a TOSCA orchestrator
          should attempt to allocate. The value for this property MUST be in the range
          between the values set for min_instances and max_instances properties. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: integer
      max_instances:
        constraints: []
        default: 1
        description: 'This property is used to indicate the maximum number of instances
          that should be created for the associated TOSCA Node Template by a TOSCA
          orchestrator. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: integer
      min_instances:
        constraints: []
        default: 1
        description: 'This property is used to indicate the minimum number of instances
          that should be created for the associated TOSCA Node Template by a TOSCA
          orchestrator. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: integer
    valid_source_types: []
  tosca.capabilities.network.Bindable:
    attributes: {}
    derived_from: tosca.capabilities.Node
    description: 'A node type that includes the Bindable capability indicates that
      it can be pointed by tosca.relationships.network.BindsTo relationship type,
      which represents a network association relationship between Port and Compute
      node types. '
    metadata: {}
    properties: {}
    valid_source_types: []
  tosca.capabilities.network.Linkable:
    attributes: {}
    derived_from: tosca.capabilities.Node
    description: 'A node type that includes the Linkable capability indicates that
      it can be pointed by tosca.relationships.network.LinksTo relationship type,
      which represents an association relationship between Port and Network node types. '
    metadata: {}
    properties: {}
    valid_source_types: []
data_types:
  tosca.datatypes.Credential:
    constraints: []
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties:
      keys:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: map
      protocol:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      token:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      token_type:
        constraints: []
        default: password
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      user:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
  tosca.datatypes.Root:
    constraints: []
    description: 'The TOSCA root Data Type all other TOSCA base Data Types derive
      from '
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties: {}
  tosca.datatypes.network.NetworkInfo:
    constraints: []
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties:
      addresses:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      network_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      network_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
  tosca.datatypes.network.PortDef:
    constraints:
    - equal:
        in_range:
        - 1
        - 65535
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties: {}
  tosca.datatypes.network.PortInfo:
    constraints: []
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties:
      addresses:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      mac_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      network_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
  tosca.datatypes.network.PortSpec:
    constraints: []
    derived_from: tosca.datatypes.Root
    entry_schema: {}
    key_schema: {}
    metadata: {}
    properties:
      protocol:
        constraints:
        - equal:
            valid_values:
            - udp
            - tcp
            - igmp
            - icmp
        default: tcp
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      source:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: tosca.datatypes.network.PortDef
      source_range:
        constraints:
        - equal:
            in_range:
            - 1
            - 65535
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: range
      target:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: tosca.datatypes.network.PortDef
      target_range:
        constraints:
        - equal:
            in_range:
            - 1
            - 65535
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: range
group_types: {}
interface_types:
  provider.interfaces.relationships.Target:
    derived_from: tosca.interfaces.Root
    description: 'The relationship to use scripts before target or source is created
      in relationship '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.Root:
    description: 'The TOSCA root Interface Type all other TOSCA base Interface Types
      derive from '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.node.lifecycle.Standard:
    derived_from: tosca.interfaces.Root
    description: This lifecycle interface defines the essential, normative operations
      that TOSCA nodes may support.
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
  tosca.interfaces.relationship.Configure:
    derived_from: tosca.interfaces.Root
    description: 'The lifecycle interfaces define the essential, normative operations
      that each TOSCA Relationship Types may support. '
    inputs: {}
    metadata: {}
    notifications: {}
    operations: {}
node_types:
  openstack.nodes.Flavor:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      disk:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      ephemeral:
        constraints: []
        default: 0 GiB
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: scalar-unit.size
      extra_specs:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: map
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      is_public:
        constraints: []
        default: true
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      ram:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      swap:
        constraints: []
        default: 0 MiB
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: scalar-unit.size
      vcpus:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: integer
    requirements: []
  openstack.nodes.FloatingIp:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      fixed_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      floating_ip_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      nat_destination:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - network:
        capability: openstack.capabilities.network.Linkable
        node: openstack.nodes.Network
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.network.LinksTo
    - server:
        capability: openstack.capabilities.network.Bindable
        node: openstack.nodes.Server
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.network.BindsTo
  openstack.nodes.Image:
    artifacts:
      filename:
        file: /tmp/image.img
        properties: {}
        type: openstack.artifacts.Deployment.Image
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      checksum:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      container_format:
        constraints: []
        default: bare
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: string
      created_at:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.time
      disk_format:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      is_public:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      kernel:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      min_disk:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      min_ram:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      owner:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      properties:
        constraints: []
        default: {}
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        type: map
      protected:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      ramdisk:
        constraints: []
        description: 'The name of an existing ramdisk image that will be associated
          with this image '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      size:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      updated_at:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.time
    requirements: []
  openstack.nodes.Keypair:
    artifacts:
      public_key_file:
        file: ~/.ssh/id_rsa.pub
        properties: {}
        type: openstack.artifacts.File
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      private_key:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      public_key:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements: []
  openstack.nodes.Network:
    artifacts: {}
    attributes: {}
    capabilities:
      link:
        attributes: {}
        occurrences:
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        properties: {}
        type: openstack.capabilities.network.Linkable
        valid_source_types: []
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      admin_state_up:
        constraints: []
        default: true
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      external:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      port_security_enabled:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      provider_network_type:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      provider_physical_network:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      provider_segmentation_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      shared:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
    requirements: []
  openstack.nodes.Port:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      admin_state_up:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      allowed_address_pairs:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      binding:host_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      binding:profile:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: map
      binding:vif_details:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: map
      binding:vif_type:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: map
      device_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      device_owner:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      dns_assignment:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      dns_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      extra_dhcp_opts:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      fixed_ips:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema:
            constraints: []
            entry_schema: {}
            key_schema: {}
            type: string
          key_schema: {}
          type: map
        key_schema: {}
        metadata: {}
        required: false
        type: list
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      ip_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      mac_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port_security_enabled:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: boolean
      vnic_type:
        constraints: []
        default: normal
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: string
    requirements:
    - security_groups:
        capability: openstack.capabilities.Container
        node: openstack.nodes.SecurityGroup
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - network:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - security_groups:
        capability: openstack.capabilities.Container
        node: openstack.nodes.SecurityGroup
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - network:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
  openstack.nodes.Root:
    artifacts: {}
    attributes: {}
    capabilities:
      feature:
        attributes: {}
        occurrences:
        - 1
        - 1
        - 1
        - 1
        - 1
        - 1
        - 1
        - 1
        - 1
        - 1
        properties: {}
        type: openstack.capabilities.Node
        valid_source_types: []
    derived_from: tosca.nodes.Root
    interfaces:
      Standard:
        notifications: {}
        operations: {}
        type: tosca.interfaces.node.lifecycle.Standard
    metadata: {}
    properties: {}
    requirements:
    - dependency:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - dependency:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - dependency:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - dependency:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - dependency:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
  openstack.nodes.SecurityGroup:
    artifacts: {}
    attributes: {}
    capabilities:
      host:
        attributes: {}
        occurrences:
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        properties: {}
        type: openstack.capabilities.Container
        valid_source_types: []
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      description:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
    requirements: []
  openstack.nodes.SecurityGroupRule:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      direction:
        constraints: []
        default: ingress
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: string
      ethertype:
        constraints:
        - equal:
            valid_values:
            - IPv4
            - IPv6
        default: IPv4
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: string
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port_range_max:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      port_range_min:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      protocol:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      remote_ip_prefix:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - security_group:
        capability: openstack.capabilities.Container
        node: openstack.nodes.SecurityGroup
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
  openstack.nodes.Server:
    artifacts: {}
    attributes: {}
    capabilities:
      bind:
        attributes: {}
        occurrences:
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        properties: {}
        type: openstack.capabilities.network.Bindable
        valid_source_types: []
      host:
        attributes: {}
        occurrences:
        - 0
        - UNBOUNDED
        - 0
        - UNBOUNDED
        properties: {}
        type: openstack.capabilities.Container
        valid_source_types: []
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      auto_ip:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      boot_from_volume:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      config_drive:
        constraints: []
        default: false
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      created_at:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      floating_ip_pools:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      floating_ips:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: list
      id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      meta:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      nics:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: list
      reuse_ips:
        constraints: []
        default: true
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: boolean
      scheduler_hints:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: string
        key_schema: {}
        metadata: {}
        required: false
        type: map
      userdata:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      vm_state:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - nics:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - volumes:
        capability: openstack.capabilities.Attachment
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.AttachesTo
    - key_name:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Keypair
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - security_groups:
        capability: openstack.capabilities.Node
        node: openstack.nodes.SecurityGroup
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - nics:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Port
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - network:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - flavor:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Flavor
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - boot_volume:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - image:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Image
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - nics:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - volumes:
        capability: openstack.capabilities.Attachment
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.AttachesTo
    - key_name:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Keypair
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - security_groups:
        capability: openstack.capabilities.Node
        node: openstack.nodes.SecurityGroup
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - nics:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Port
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: openstack.relationships.DependsOn
    - network:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Network
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - flavor:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Flavor
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - boot_volume:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - image:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Image
        occurrences:
        - 1
        - 1
        relationship:
          type: openstack.relationships.DependsOn
  openstack.nodes.Volume:
    artifacts: {}
    attributes: {}
    capabilities:
      attachment:
        attributes: {}
        occurrences:
        - 0
        - 1
        - 0
        - 1
        properties: {}
        type: openstack.capabilities.Attachment
        valid_source_types: []
    derived_from: openstack.nodes.Root
    interfaces: {}
    metadata: {}
    properties:
      display_description:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      display_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
      metadata:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: list
      scheduler_hints:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      size:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: scalar-unit.size
      volume_type:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - image:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Image
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - snapshot_id:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - volume:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - image:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Image
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - snapshot_id:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
    - volume:
        capability: openstack.capabilities.Node
        node: openstack.nodes.Volume
        occurrences:
        - 0
        - 1
        relationship:
          type: openstack.relationships.DependsOn
  tosca.nodes.BlockStorage:
    artifacts: {}
    attributes: {}
    capabilities:
      attachment:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Attachment
        valid_source_types: []
    derived_from: tosca.nodes.Root
    description: 'The TOSCA BlockStorage node currently represents a server-local
      block storage device (i.e., not shared) offering evenly sized blocks of data
      from which raw storage volumes can be created. '
    interfaces: {}
    metadata: {}
    properties:
      size:
        constraints:
        - equal:
            greater_or_equal: 1 MB
        entry_schema: {}
        key_schema: {}
        metadata: {}
        type: scalar-unit.size
      snapshot_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      volume_id:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements: []
  tosca.nodes.Compute:
    artifacts: {}
    attributes: {}
    capabilities:
      binding:
        attributes: {}
        properties: {}
        type: tosca.capabilities.network.Bindable
        valid_source_types: []
      endpoint:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Endpoint.Admin
        valid_source_types: []
      host:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Container
        valid_source_types:
        - tosca.nodes.SoftwareComponent
      os:
        attributes: {}
        properties: {}
        type: tosca.capabilities.OperatingSystem
        valid_source_types: []
      scalable:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Scalable
        valid_source_types: []
    derived_from: tosca.nodes.Root
    description: 'The TOSCA Compute node represents one or more real or virtual processors
      of software applications or services along with other essential local resources. '
    interfaces: {}
    metadata: {}
    properties:
      meta:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      networks:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: tosca.datatypes.network.NetworkInfo
        key_schema: {}
        metadata: {}
        required: false
        type: map
      ports:
        constraints: []
        entry_schema:
          constraints: []
          entry_schema: {}
          key_schema: {}
          type: tosca.datatypes.network.PortInfo
        key_schema: {}
        metadata: {}
        required: false
        type: map
      private_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      public_address:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - local_storage:
        capability: tosca.capabilities.Attachment
        node: tosca.nodes.BlockStorage
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.AttachesTo
  tosca.nodes.Root:
    artifacts: {}
    attributes: {}
    capabilities:
      feature:
        attributes: {}
        properties: {}
        type: tosca.capabilities.Node
        valid_source_types: []
    description: 'The TOSCA root node all other TOSCA base node types derive from. '
    interfaces:
      Standard:
        notifications: {}
        operations: {}
        type: tosca.interfaces.node.lifecycle.Standard
    metadata: {}
    properties:
      state:
        constraints: []
        description: "The state of the node instance. See section \u201CNode States\u201D\
          \ for allowed values. "
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      tosca_id:
        constraints: []
        description: 'A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      tosca_name:
        constraints: []
        description: 'This attribute reflects the name of the Node Template as defined
          in the TOSCA service template. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    requirements:
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
    - dependency:
        capability: tosca.capabilities.Node
        node: tosca.nodes.Root
        occurrences:
        - 0
        - UNBOUNDED
        relationship:
          type: tosca.relationships.DependsOn
  tosca.nodes.SoftwareComponent:
    artifacts: {}
    attributes: {}
    capabilities: {}
    derived_from: tosca.nodes.Root
    description: 'The TOSCA SoftwareComponent node represents a generic software component
      that can be managed and run by a TOSCA Compute Node Type. '
    interfaces: {}
    metadata: {}
    properties:
      admin_credential:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: tosca.datatypes.Credential
      component_version:
        constraints: []
        description: 'Software component version. '
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: version
    requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship:
          type: tosca.relationships.HostedOn
policy_types: {}
relationship_types:
  openstack.relationships.AttachesTo:
    attributes: {}
    derived_from: provider.relationships.Root
    description: This type represents the attachment of volume to the server
    interfaces: {}
    metadata: {}
    properties:
      device:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
    valid_target_types:
    - openstack.capabilities.Attachment
    - openstack.capabilities.Attachment
  openstack.relationships.DependsOn:
    attributes: {}
    derived_from: provider.relationships.DependsOn
    description: This type results in ordering of initializing objects.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - openstack.capabilities.Node
    - openstack.capabilities.Node
    - openstack.capabilities.Node
    - openstack.capabilities.Node
    - openstack.capabilities.Node
  openstack.relationships.network.BindsTo:
    attributes: {}
    derived_from: provider.relationships.network.BindsTo
    description: This type appears between FloatingIp and Server
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - openstack.capabilities.network.Bindable
  openstack.relationships.network.LinksTo:
    attributes: {}
    derived_from: provider.relationships.network.LinksTo
    description: This type appears between FloatingIp and Network
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - openstack.capabilities.network.Linkable
  provider.relationships.DependsOn:
    attributes: {}
    derived_from: provider.relationships.Root
    description: This type results in ordering of initializing objects.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
  provider.relationships.Root:
    attributes: {}
    derived_from: tosca.relationships.Root
    interfaces:
      Target:
        notifications: {}
        operations: {}
        type: provider.interfaces.relationships.Target
    metadata: {}
    properties: {}
    valid_target_types: []
  provider.relationships.network.BindsTo:
    attributes: {}
    derived_from: tosca.relationships.network.BindsTo
    description: This type appears between FloatingIp and Server
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.network.Bindable
  provider.relationships.network.LinksTo:
    attributes: {}
    derived_from: tosca.relationships.network.LinksTo
    description: This type appears between FloatingIp and Network
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.network.Linkable
  tosca.relationships.AttachesTo:
    attributes: {}
    derived_from: tosca.relationships.Root
    description: 'This type represents an attachment relationship between two nodes.
      For example, an AttachesTo relationship type would be used for attaching a storage
      node to a Compute node. '
    interfaces: {}
    metadata: {}
    properties:
      device:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: false
        type: string
      location:
        constraints:
        - equal:
            min_length: 1
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
    valid_target_types:
    - tosca.capabilities.Attachment
  tosca.relationships.DependsOn:
    attributes: {}
    derived_from: tosca.relationships.Root
    description: This type represents a general dependency relationship between two
      nodes.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
    - tosca.capabilities.Node
  tosca.relationships.HostedOn:
    attributes: {}
    derived_from: tosca.relationships.Root
    description: This type represents a hosting relationship between two nodes.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.Container
  tosca.relationships.Root:
    attributes:
      state:
        entry_schema: {}
        key_schema: {}
        type: string
      tosca_id:
        entry_schema: {}
        key_schema: {}
        type: string
    description: 'The TOSCA root Relationship Type all other TOSCA base Relationship
      Types derive from. '
    interfaces:
      Configure:
        notifications: {}
        operations: {}
        type: tosca.interfaces.relationship.Configure
    metadata: {}
    properties:
      tosca_name:
        constraints: []
        entry_schema: {}
        key_schema: {}
        metadata: {}
        required: true
        type: string
    valid_target_types: []
  tosca.relationships.network.BindsTo:
    attributes: {}
    derived_from: tosca.relationships.DependsOn
    description: This type represents a network association relationship between Port
      and Compute node types.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.network.Bindable
  tosca.relationships.network.LinksTo:
    attributes: {}
    derived_from: tosca.relationships.DependsOn
    description: This relationship type represents an association relationship between
      Port and Network node types.
    interfaces: {}
    metadata: {}
    properties: {}
    valid_target_types:
    - tosca.capabilities.network.Linkable
topology_template:
  node_templates:
    software_for_cumulus_software_component:
      interfaces:
        Standard:
          create:
            implementation: ansible-operation-example.yaml
      requirements:
      - host:
          node: testing_tosca_server
          node_filter:
            properties:
            - auto_ip: false
            - meta: cube_master=true
            - name: testing_tosca_{{ item }}
            - nics:
              - net-name: test-two-routers
            - id: '{{ testing_tosca_server_delete }}'
      - dependency:
          node: testing_tosca_keypair
          node_filter:
            properties:
            - name: testing_tosca_keypair
            - public_key: '{{ lookup(''file'', ''~/.ssh/id_rsa.pub'') }}'
            - id: '{{ testing_tosca_keypair_delete }}'
      - dependency:
          node: testing_tosca_floating_ip
          node_filter:
            properties:
            - floating_ip_address: 10.10.10.10
            - id: '{{ testing_tosca_floating_ip_delete }}'
      - dependency:
          node: testing_tosca_server
          node_filter:
            properties:
            - auto_ip: false
            - meta: cube_master=true
            - name: testing_tosca_{{ item }}
            - nics:
              - net-name: test-two-routers
            - id: '{{ testing_tosca_server_delete }}'
      - dependency:
          node: testing_tosca_security_group
          node_filter:
            properties:
            - name: testing_tosca_security_group
            - id: '{{ testing_tosca_security_group_delete }}'
      - dependency:
          node: testing_tosca_security_group_rule
          node_filter:
            properties:
            - direction: '{{ initiator[item | int] | default(omit) }}'
            - port_range_max: '{{ port[item | int] | default(omit) }}'
            - port_range_min: '{{ port[item | int] | default(omit) }}'
            - protocol: '{{ protocol[item | int] | default(omit) }}'
            - remote_ip_prefix: 0.0.0.0
            - id: '{{ testing_tosca_security_group_rule_delete }}'
      type: tosca.nodes.SoftwareComponent
    testing_tosca_floating_ip:
      interfaces:
        Standard:
          create:
            implementation: add_host.yaml
            inputs:
              ansible_user: xenial
              group: testing_tosca_server_public_address
              host_ip: '{{ host_ip | default([]) + [[ "testing_tosca_public_address_"
                + item, testing_tosca_floating_ip.results[item | int - 1].floating_ip.floating_ip_address
                ]] }}'
      properties:
        floating_ip_address: 10.10.10.10
      requirements:
      - server:
          node: testing_tosca_server
          node_filter:
            properties:
            - auto_ip: false
            - meta: cube_master=true
            - name: testing_tosca_{{ item }}
            - nics:
              - net-name: test-two-routers
            - id: '{{ testing_tosca_server_delete }}'
      - network:
          node_filter:
            properties:
            - parameter: name
              value: null
      type: openstack.nodes.FloatingIp
    testing_tosca_keypair:
      properties:
        name: testing_tosca_keypair
        public_key: '{{ lookup(''file'', ''~/.ssh/id_rsa.pub'') }}'
      type: openstack.nodes.Keypair
    testing_tosca_security_group:
      properties:
        name: testing_tosca_security_group
      type: openstack.nodes.SecurityGroup
    testing_tosca_security_group_rule:
      properties:
        direction: '{{ initiator[item | int] | default(omit) }}'
        ethertype: IPv4
        port_range_max: '{{ port[item | int] | default(omit) }}'
        port_range_min: '{{ port[item | int] | default(omit) }}'
        protocol: '{{ protocol[item | int] | default(omit) }}'
        remote_ip_prefix: 0.0.0.0
      requirements:
      - security_group:
          node: testing_tosca_security_group
          node_filter:
            properties:
            - name: testing_tosca_security_group
            - id: '{{ testing_tosca_security_group_delete }}'
      type: openstack.nodes.SecurityGroupRule
    testing_tosca_server:
      interfaces:
        Standard:
          create:
            implementation: add_host.yaml
            inputs:
              ansible_user: xenial
              group: testing_tosca_server_private_address
              host_ip: '{{ host_ip | default([]) + [[ "testing_tosca_private_address_"
                + item, testing_tosca_server.results[item | int - 1].server.public_v4
                ]] }}'
      properties:
        auto_ip: false
        boot_from_volume: false
        config_drive: false
        meta: cube_master=true
        name: testing_tosca_{{ item }}
        nics:
        - net-name: test-two-routers
        reuse_ips: true
      requirements:
      - key_name:
          node: testing_tosca_keypair
          node_filter:
            properties:
            - name: testing_tosca_keypair
            - public_key: '{{ lookup(''file'', ''~/.ssh/id_rsa.pub'') }}'
            - id: '{{ testing_tosca_keypair_delete }}'
      - flavor:
          node_filter:
            properties:
            - vcpus: 1
            - disk: 5.0
            - ram: 1024.0
      - security_groups:
          node: testing_tosca_security_group
          node_filter:
            properties:
            - name: testing_tosca_security_group
            - id: '{{ testing_tosca_security_group_delete }}'
      - image:
          node_filter:
            properties:
            - parameter: name
              value: null
      type: openstack.nodes.Server
tosca_definitions_version: tosca_simple_yaml_1_0
